/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package spm_uploadFile;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Nilfa.RS
 */
public class uploadFile extends javax.swing.JFrame {

    private int numcount;
    private int count_key_words_Set;
    private int count_manipulate_operation;
    private int count_assignment_operation;
    private int count_bitwise_operation;
    private int count_logical_operation;
    private int count_realational_operator;
    private int countminus;
    private int countplus;
    private int count_operation;
    private int result;
    private int count_star_and_keys;
    private String star;
    private String and;
    private String throwk;
    private String throwsk;
    private String newk;
    private String deletek;
    private int countand;
    private int countstar;
    private int count_throw;
    private int count_throws;
    private int count_new;
    private int count_delete;
    private int count_classes;
    private int count_objects;
    private int count_variable;
    private int class_variable_method_object_count;
    private int count_methods;
    private int count_methodstotal;

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    public uploadFile() {

        initComponents();
        con = DBConnection.connect();

    }

    class MyhighLightPainter extends DefaultHighlighter.DefaultHighlightPainter {

        public MyhighLightPainter(Color c) {
            super(c);
        }

    }
    Highlighter.HighlightPainter myPainter = new MyhighLightPainter(Color.CYAN);

    public void removeHighlights(JTextComponent textComp) {

        Highlighter hilite = textComp.getHighlighter();
        Highlighter.Highlight[] hilites = hilite.getHighlights();

        for (int i = 0; i < hilites.length; i++) {

            if (hilites[i].getPainter() instanceof MyhighLightPainter) {
                hilite.removeHighlight(hilites[i]);

            }
        }

    }

    public void highlight(JTextComponent textComp, String pattern) {

        removeHighlights(textComp);
        try {
            Highlighter hilite = textComp.getHighlighter();
            Document doc = textComp.getDocument();
            String text = doc.getText(0, doc.getLength());

            int pos = 0;

            while ((pos = text.toUpperCase().indexOf(pattern.toUpperCase(), pos)) >= 0) {

                hilite.addHighlight(pos, pos + pattern.length(), myPainter);
                pos += pattern.length();

            }

        } catch (Exception e) {
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        words1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jButton24 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jButton15 = new javax.swing.JButton();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        method_count = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jButton17 = new javax.swing.JButton();
        jLabel65 = new javax.swing.JLabel();
        variable_count = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jLabel68 = new javax.swing.JLabel();
        jButton19 = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jButton18 = new javax.swing.JButton();
        jLabel70 = new javax.swing.JLabel();
        jButton21 = new javax.swing.JButton();
        object_count = new javax.swing.JLabel();
        class_count = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tb2 = new javax.swing.JTable();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        searchtext = new javax.swing.JTextField();
        searchbtn = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Complexity due to SIZE");
        setBackground(new java.awt.Color(102, 102, 102));
        setPreferredSize(new java.awt.Dimension(1400, 850));

        jPanel1.setBackground(new java.awt.Color(0, 0, 153));
        jPanel1.setLayout(null);

        jTextArea1.setBackground(new java.awt.Color(204, 204, 255));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 720, 140);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spm_uploadFile/images/delete.png"))); // NOI18N
        jPanel1.add(jLabel5);
        jLabel5.setBounds(640, 20, 20, 13);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spm_uploadFile/images/h.png"))); // NOI18N
        jPanel1.add(jLabel6);
        jLabel6.setBounds(510, 20, 20, 13);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Browse");
        jButton1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(490, 10, 130, 30);

        jTextField1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1);
        jTextField1.setBounds(50, 10, 440, 30);

        jPanel3.setLayout(null);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(null);

        jButton2.setBackground(new java.awt.Color(204, 204, 204));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setText("Count of : *  &   new delete throws throw");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2);
        jButton2.setBounds(10, 70, 300, 60);

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jLabel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel3.setOpaque(true);
        jPanel4.add(jLabel3);
        jLabel3.setBounds(320, 70, 120, 30);

        jLabel4.setBackground(new java.awt.Color(204, 204, 204));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel4.setOpaque(true);
        jPanel4.add(jLabel4);
        jLabel4.setBounds(320, 100, 120, 30);

        jButton4.setBackground(new java.awt.Color(204, 204, 204));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setText("Arithmatic operatos : +  -   /  %  ++  --");
        jButton4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton4);
        jButton4.setBounds(10, 140, 300, 60);

        jLabel7.setBackground(new java.awt.Color(204, 204, 204));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jLabel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel7.setOpaque(true);
        jPanel4.add(jLabel7);
        jLabel7.setBounds(440, 70, 130, 30);

        jLabel8.setBackground(new java.awt.Color(204, 204, 204));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jLabel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel8.setOpaque(true);
        jPanel4.add(jLabel8);
        jLabel8.setBounds(440, 100, 130, 30);

        jLabel9.setBackground(new java.awt.Color(204, 204, 204));
        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jLabel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel9.setOpaque(true);
        jPanel4.add(jLabel9);
        jLabel9.setBounds(570, 70, 120, 30);

        jLabel10.setBackground(new java.awt.Color(204, 204, 204));
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jLabel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel10.setOpaque(true);
        jPanel4.add(jLabel10);
        jLabel10.setBounds(570, 100, 120, 30);

        jLabel11.setBackground(new java.awt.Color(204, 204, 204));
        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel11.setOpaque(true);
        jPanel4.add(jLabel11);
        jLabel11.setBounds(550, 140, 140, 30);

        jLabel14.setBackground(new java.awt.Color(204, 204, 204));
        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel14.setOpaque(true);
        jPanel4.add(jLabel14);
        jLabel14.setBounds(550, 170, 140, 30);

        jLabel15.setBackground(new java.awt.Color(204, 204, 204));
        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel15.setOpaque(true);
        jPanel4.add(jLabel15);
        jLabel15.setBounds(320, 140, 230, 30);

        jLabel16.setBackground(new java.awt.Color(204, 204, 204));
        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel16.setOpaque(true);
        jPanel4.add(jLabel16);
        jLabel16.setBounds(320, 170, 230, 30);

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), null));

        words1.setBackground(new java.awt.Color(204, 204, 204));
        words1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        words1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        words1.setOpaque(true);

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel2.setOpaque(true);

        jLabel1.setText("   # Words");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel23.setText("   # Charactors");
        jLabel23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(words1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(words1, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel5);
        jPanel5.setBounds(10, 10, 680, 50);

        jLabel12.setBackground(new java.awt.Color(204, 204, 204));
        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jLabel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel12.setOpaque(true);
        jPanel4.add(jLabel12);
        jLabel12.setBounds(320, 210, 180, 30);

        jLabel13.setBackground(new java.awt.Color(204, 204, 204));
        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel13.setOpaque(true);
        jPanel4.add(jLabel13);
        jLabel13.setBounds(500, 210, 190, 30);

        jButton5.setBackground(new java.awt.Color(204, 204, 204));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton5.setText("Relation operators: ==  !=  >  <  >=  <= ");
        jButton5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton5);
        jButton5.setBounds(10, 210, 300, 30);

        jButton6.setBackground(new java.awt.Color(204, 204, 204));
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton6.setText("Logical and Miscellaneous: &&  ||   !  , ->.  ::");
        jButton6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton6);
        jButton6.setBounds(10, 250, 300, 30);

        jLabel17.setBackground(new java.awt.Color(204, 204, 204));
        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel17.setOpaque(true);
        jPanel4.add(jLabel17);
        jLabel17.setBounds(320, 250, 180, 30);

        jLabel18.setBackground(new java.awt.Color(204, 204, 204));
        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel18.setOpaque(true);
        jPanel4.add(jLabel18);
        jLabel18.setBounds(500, 250, 190, 30);

        jPanel3.add(jPanel4);
        jPanel4.setBounds(10, 10, 700, 290);

        jPanel1.add(jPanel3);
        jPanel3.setBounds(10, 230, 720, 310);

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setText("Reset");
        jButton3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(620, 10, 110, 30);

        jButton23.setBackground(new java.awt.Color(204, 204, 204));
        jButton23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton23.setText("Remove Comments");
        jButton23.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton23.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton23.setPreferredSize(new java.awt.Dimension(153, 19));
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton23);
        jButton23.setBounds(10, 190, 350, 30);

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spm_uploadFile/images/window-back-button (3).png"))); // NOI18N
        jButton9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton9);
        jButton9.setBounds(10, 11, 40, 29);

        jLabel22.setBackground(new java.awt.Color(255, 255, 255));
        jLabel22.setOpaque(true);
        jPanel1.add(jLabel22);
        jLabel22.setBounds(10, 10, 40, 30);

        jButton24.setBackground(new java.awt.Color(204, 204, 204));
        jButton24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton24.setText("Remove Println Statements");
        jButton24.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton24.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton24.setPreferredSize(new java.awt.Dimension(153, 19));
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton24);
        jButton24.setBounds(370, 190, 360, 30);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setLayout(null);

        jPanel6.setLayout(null);

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel7.setLayout(null);

        jButton7.setBackground(new java.awt.Color(204, 204, 204));
        jButton7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton7.setText("Bitwise operators: | ^ ~  << >>  >>>  <<< ");
        jButton7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton7);
        jButton7.setBounds(10, 10, 300, 60);

        jLabel19.setBackground(new java.awt.Color(204, 204, 204));
        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jLabel19.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel19.setOpaque(true);
        jPanel7.add(jLabel19);
        jLabel19.setBounds(320, 10, 260, 30);

        jLabel20.setBackground(new java.awt.Color(204, 204, 204));
        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        jLabel20.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel20.setOpaque(true);
        jPanel7.add(jLabel20);
        jLabel20.setBounds(320, 40, 260, 30);

        jButton8.setBackground(new java.awt.Color(204, 204, 204));
        jButton8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton8.setText("Assignment operators");
        jButton8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton8);
        jButton8.setBounds(10, 80, 250, 30);

        jLabel25.setBackground(new java.awt.Color(204, 204, 204));
        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel25.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel25.setOpaque(true);
        jPanel7.add(jLabel25);
        jLabel25.setBounds(10, 110, 250, 30);

        jLabel27.setBackground(new java.awt.Color(204, 204, 204));
        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel27.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel27.setOpaque(true);
        jPanel7.add(jLabel27);
        jLabel27.setBounds(270, 110, 310, 30);

        jButton10.setBackground(new java.awt.Color(204, 204, 204));
        jButton10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton10.setText("Number of Manipulators  ");
        jButton10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton10);
        jButton10.setBounds(10, 150, 250, 30);

        jLabel33.setBackground(new java.awt.Color(204, 204, 204));
        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel33.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel33.setOpaque(true);
        jPanel7.add(jLabel33);
        jLabel33.setBounds(10, 180, 250, 30);

        jLabel34.setBackground(new java.awt.Color(204, 204, 204));
        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel34.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel34.setOpaque(true);
        jPanel7.add(jLabel34);
        jLabel34.setBounds(270, 180, 310, 30);

        jLabel35.setBackground(new java.awt.Color(204, 204, 204));
        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel35.setText("                       ‘endl’   ‘ \\n’");
        jLabel35.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel35.setOpaque(true);
        jPanel7.add(jLabel35);
        jLabel35.setBounds(270, 150, 310, 30);

        jLabel36.setBackground(new java.awt.Color(204, 204, 204));
        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel36.setText(" +=  -=  *=  /= =  >>>=  |=  &= %=  <<= >>= ^= ");
        jLabel36.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel36.setOpaque(true);
        jPanel7.add(jLabel36);
        jLabel36.setBounds(270, 80, 310, 30);

        jPanel6.add(jPanel7);
        jPanel7.setBounds(0, 0, 590, 220);

        jPanel2.add(jPanel6);
        jPanel6.setBounds(10, 10, 590, 210);

        jPanel12.setLayout(null);

        jPanel13.setBackground(new java.awt.Color(0, 0, 102));
        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel13.setLayout(null);

        jButton15.setBackground(new java.awt.Color(204, 204, 204));
        jButton15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton15.setText("Count Key Words");
        jButton15.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton15.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton15);
        jButton15.setBounds(10, 10, 310, 30);

        jLabel55.setBackground(new java.awt.Color(204, 204, 204));
        jLabel55.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel55.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel55.setOpaque(true);
        jPanel13.add(jLabel55);
        jLabel55.setBounds(10, 70, 570, 20);

        jLabel56.setBackground(new java.awt.Color(204, 204, 204));
        jLabel56.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel56.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel56.setOpaque(true);
        jPanel13.add(jLabel56);
        jLabel56.setBounds(320, 10, 260, 30);

        method_count.setBackground(new java.awt.Color(204, 204, 204));
        method_count.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        method_count.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        method_count.setOpaque(true);
        jPanel13.add(method_count);
        method_count.setBounds(520, 140, 60, 30);

        jLabel63.setBackground(new java.awt.Color(204, 204, 204));
        jLabel63.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel63.setText("   ‘if’  ‘for’  ‘while’   ‘do-while’  ‘switch   ‘case’");
        jLabel63.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel63.setOpaque(true);
        jPanel13.add(jLabel63);
        jLabel63.setBounds(320, 40, 260, 30);

        jLabel64.setBackground(new java.awt.Color(204, 204, 204));
        jLabel64.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel64.setText(" void  double  int  float  string  printf  println  cout cin");
        jLabel64.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel64.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel64.setOpaque(true);
        jPanel13.add(jLabel64);
        jLabel64.setBounds(10, 40, 310, 30);

        jButton17.setBackground(new java.awt.Color(204, 204, 204));
        jButton17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton17.setText(" Numeric values");
        jButton17.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton17.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton17);
        jButton17.setBounds(10, 110, 300, 30);

        jLabel65.setBackground(new java.awt.Color(204, 204, 204));
        jLabel65.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel65.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel65.setOpaque(true);
        jPanel13.add(jLabel65);
        jLabel65.setBounds(320, 110, 260, 30);

        variable_count.setBackground(new java.awt.Color(204, 204, 204));
        variable_count.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        variable_count.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        variable_count.setOpaque(true);
        jPanel13.add(variable_count);
        variable_count.setBounds(390, 140, 60, 30);

        jPanel10.setBackground(new java.awt.Color(204, 204, 255));
        jPanel10.setLayout(null);

        jPanel17.setBackground(new java.awt.Color(204, 204, 204));
        jPanel17.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), null));

        jLabel68.setBackground(new java.awt.Color(204, 204, 204));
        jLabel68.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel68.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 153), new java.awt.Color(0, 153, 204)));
        jLabel68.setOpaque(true);

        jButton19.setBackground(new java.awt.Color(204, 204, 204));
        jButton19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton19.setText("     Total Weight = Ctc + Cnc + Ci");
        jButton19.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton19.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel68, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.add(jPanel17);
        jPanel17.setBounds(10, 60, 550, 40);

        jPanel18.setBackground(new java.awt.Color(204, 204, 204));
        jPanel18.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(102, 102, 102), null));

        jButton18.setBackground(new java.awt.Color(204, 204, 204));
        jButton18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton18.setText("   Total Complexity due to Size :  Cs");
        jButton18.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton18.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jLabel70.setBackground(new java.awt.Color(204, 204, 204));
        jLabel70.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel70.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 153), new java.awt.Color(0, 153, 204)));
        jLabel70.setOpaque(true);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jLabel70, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel70, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.add(jPanel18);
        jPanel18.setBounds(10, 10, 550, 40);

        jPanel13.add(jPanel10);
        jPanel10.setBounds(10, 190, 570, 110);

        jButton21.setBackground(new java.awt.Color(204, 204, 204));
        jButton21.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton21.setText("Class-Variables-Objects-Methods");
        jButton21.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton21.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        jPanel13.add(jButton21);
        jButton21.setBounds(10, 140, 300, 30);

        object_count.setBackground(new java.awt.Color(204, 204, 204));
        object_count.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        object_count.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        object_count.setOpaque(true);
        jPanel13.add(object_count);
        object_count.setBounds(450, 140, 70, 30);

        class_count.setBackground(new java.awt.Color(204, 204, 204));
        class_count.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        class_count.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        class_count.setOpaque(true);
        jPanel13.add(class_count);
        class_count.setBounds(320, 140, 70, 30);

        jPanel12.add(jPanel13);
        jPanel13.setBounds(0, 10, 590, 310);

        jPanel2.add(jPanel12);
        jPanel12.setBounds(10, 220, 590, 320);

        jPanel8.setBackground(new java.awt.Color(255, 255, 204));
        jPanel8.setLayout(null);

        tb2.setBackground(new java.awt.Color(204, 204, 204));
        tb2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        tb2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Line #", "Code", "&,*,delete,throw,throws,new", "Arithmatic", "Relation", "Logical", "Bitwise", "Assignment", "Manipulators", "Keywords", "Numeric", "Class-Variables-Methods-Objects", "Cs", "TW"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tb2);
        if (tb2.getColumnModel().getColumnCount() > 0) {
            tb2.getColumnModel().getColumn(0).setPreferredWidth(5);
            tb2.getColumnModel().getColumn(3).setPreferredWidth(15);
            tb2.getColumnModel().getColumn(4).setPreferredWidth(15);
            tb2.getColumnModel().getColumn(5).setPreferredWidth(15);
            tb2.getColumnModel().getColumn(6).setPreferredWidth(15);
            tb2.getColumnModel().getColumn(7).setPreferredWidth(15);
            tb2.getColumnModel().getColumn(8).setPreferredWidth(15);
            tb2.getColumnModel().getColumn(9).setPreferredWidth(19);
            tb2.getColumnModel().getColumn(10).setPreferredWidth(19);
            tb2.getColumnModel().getColumn(12).setPreferredWidth(15);
            tb2.getColumnModel().getColumn(13).setPreferredWidth(15);
        }

        jPanel8.add(jScrollPane4);
        jScrollPane4.setBounds(10, 40, 1340, 110);

        jButton11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spm_uploadFile/images/d.png"))); // NOI18N
        jButton11.setText("Load  Data in Table View");
        jButton11.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(226, 100, 226), new java.awt.Color(233, 117, 219), new java.awt.Color(240, 81, 240), new java.awt.Color(207, 129, 195)));
        jButton11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton11);
        jButton11.setBounds(10, 10, 230, 30);

        jButton12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spm_uploadFile/images/promotion.png"))); // NOI18N
        jButton12.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 255, 0), new java.awt.Color(51, 255, 0), new java.awt.Color(0, 255, 0), new java.awt.Color(51, 255, 0)));
        jButton12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton12.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton12.setLabel("    Compare Complexity");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton12);
        jButton12.setBounds(700, 10, 230, 30);

        jButton13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spm_uploadFile/images/report.png"))); // NOI18N
        jButton13.setText("Generate Complexity Report");
        jButton13.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 0, 102), new java.awt.Color(255, 0, 153), new java.awt.Color(255, 0, 102), new java.awt.Color(255, 0, 153)));
        jButton13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton13.setOpaque(false);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton13);
        jButton13.setBounds(470, 10, 230, 30);

        jButton14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spm_uploadFile/images/savelll - Copy.png"))); // NOI18N
        jButton14.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 204, 255), new java.awt.Color(51, 255, 255), new java.awt.Color(0, 255, 255), new java.awt.Color(102, 255, 255)));
        jButton14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton14.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton14.setLabel("      Insert Data into Table");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jPanel8.add(jButton14);
        jButton14.setBounds(240, 10, 230, 30);

        searchtext.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        searchtext.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 153, 204), new java.awt.Color(51, 0, 153), new java.awt.Color(0, 0, 153), new java.awt.Color(51, 0, 102)));
        jPanel8.add(searchtext);
        searchtext.setBounds(930, 10, 320, 30);

        searchbtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        searchbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spm_uploadFile/images/Search (1).png"))); // NOI18N
        searchbtn.setText("Search");
        searchbtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 0, 51), new java.awt.Color(255, 0, 0), new java.awt.Color(255, 0, 51), new java.awt.Color(255, 0, 51)));
        searchbtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbtnActionPerformed(evt);
            }
        });
        jPanel8.add(searchbtn);
        searchbtn.setBounds(1250, 10, 100, 30);

        jLabel21.setBackground(new java.awt.Color(51, 51, 51));
        jLabel21.setOpaque(true);
        jPanel8.add(jLabel21);
        jLabel21.setBounds(-10, -6, 1370, 300);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 1355, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 748, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(348, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(664, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
        chooser.showOpenDialog(null);
        int aa = chooser.showOpenDialog(null);
        System.out.println(aa);
        File[] files = chooser.getSelectedFiles();

        int filearr = files.length;
        System.out.println(filearr);

        String fileNames = files[0].getAbsolutePath();

        System.out.println("length of files[] is:" + files.length);

        jTextField1.setText(fileNames);

        for (File f : files) {
            FileReader reader = null;
            try {
                reader = new FileReader(f);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(uploadFile.class.getName()).log(Level.SEVERE, null, ex);
            }
            BufferedReader br = new BufferedReader(reader);
            String line;
            try {
                while ((line = br.readLine()) != null) {
                    jTextArea1.append(line + "\n");
                }
            } catch (IOException ex) {
                Logger.getLogger(uploadFile.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(uploadFile.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

//        JFileChooser jf = new JFileChooser();
//        jf.setMultiSelectionEnabled(true);
//        File ff;
//        int aa = jf.showOpenDialog(null);
//        System.out.println(aa);
//        if (aa == JFileChooser.APPROVE_OPTION) {
//            FileReader fff = null;
//            try {
//               // char cbuf[] = null;
//                ff = jf.getSelectedFile();
//                jTextField1.setText(ff.getAbsolutePath());
//                System.out.println(ff);
//                JOptionPane.showMessageDialog(rootPane, "File Name  " + ff.getName());
//                fff = new FileReader(ff);
//                jTextArea1.read(fff, "");
//            } catch (Exception ex) {
//                Logger.getLogger(uploadFile.class.getName()).log(Level.SEVERE, null, ex);
//            } finally {
//                try {
//                    fff.close();
//                } catch (IOException ex) {
//                    Logger.getLogger(uploadFile.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//
//        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String text = jTextArea1.getText();
        if (text.isEmpty()) {

            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "You should import a Text File for the text area !");
        } else {

            String words[] = text.split("\\s");
            String lines[] = text.split("\\n");

            System.out.println("lines: " + lines.length);

            words1.setText("" + words.length);
            jLabel2.setText("" + text.length());

            star = "*";
            and = "&";
            throwk = "throw";
            throwsk = "throws";
            newk = "new";
            deletek = "delete";

            countand = 0;
            countstar = 0;
            count_throw = 0;
            count_throws = 0;
            count_new = 0;
            count_delete = 0;

            for (int i = 0; i < words.length; i++) {
                if (words[i].equalsIgnoreCase(and)) {
                    System.out.println("found: &");
                    countand = countand + 1;

                }
                if (words[i].equals(star)) {

                    System.out.println("found: *");
                    countstar = countstar + 1;
                }
                if (words[i].equals(throwk)) {

                    System.out.println("found: throw");
                    count_throw = count_throw + 1;
                }
                if (words[i].equals(throwsk)) {

                    System.out.println("found: throw");
                    count_throws = count_throws + 1;
                }
                if (words[i].equals(newk)) {

                    System.out.println("found: new");
                    count_new = count_new + 1;
                }
                if (words[i].equals(deletek)) {

                    System.out.println("found: delete");
                    count_delete = count_delete + 1;
                }

            }
            count_star_and_keys = 2 * (countand + countstar + count_throw + count_throws + count_new + count_delete);

            System.out.println("Count of & is: " + countand);
            System.out.println("Count of * is: " + countstar);

            jLabel3.setText(" &  : " + countand);
            jLabel4.setText(" *  : " + countstar);
            jLabel7.setText(" new : " + count_new);
            jLabel8.setText(" delete : " + count_delete);
            jLabel9.setText(" throw : " + count_throw);
            jLabel10.setText(" throws : " + count_throws);

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        count_objects = 0;
        count_star_and_keys = 0;
        numcount = 0;
        count_key_words_Set = 0;
        count_manipulate_operation = 0;
        count_assignment_operation = 0;
        count_bitwise_operation = 0;
        count_logical_operation = 0;
        count_realational_operator = 0;
        count_operation = 0;
        result = 0;
        count_variable = 0;
        count_methods = 0;
        count_classes = 0;
        countand = 0;
        countstar = 0;
        count_throw = 0;
        count_throws = 0;
        count_new = 0;
        count_delete = 0;
        tb2.setBackground(new java.awt.Color(204, 204, 204));
        tb2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        tb2.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Line #", "Code", "&,*,delete,throw,throws,new", "Arithmatic", "Relation", "Logical", "Bitwise", "Assignment", "Manipulators", "Keywords", "Numeric", "Class-Variables-Methods-Objects", "Cs", "TW"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });

        jTextArea1.setText("");
        jTextField1.setText("");
        jLabel3.setText("");
        jLabel4.setText("");
        jLabel7.setText("");
        jLabel8.setText("");
        jLabel9.setText("");
        jLabel10.setText("");
        words1.setText("");
        jLabel2.setText("");
        jLabel16.setText("");
        jLabel15.setText("");

        jLabel11.setText("");
        jLabel14.setText("");
        jLabel13.setText("");
        jLabel12.setText("");
        jLabel18.setText("");
        jLabel17.setText("");
        jLabel19.setText("");
        jLabel20.setText("");
        jLabel25.setText("");
        jLabel27.setText("");
        jLabel33.setText("");
        jLabel34.setText("");

        jLabel55.setText("");
        jLabel56.setText("");
        jLabel65.setText("");
        jLabel65.setText("");
        method_count.setText("");
        jLabel70.setText("");
        jLabel68.setText("");
        variable_count.setText("");
        class_count.setText("");
        object_count.setText("");

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        String text = jTextArea1.getText();
        String words[] = text.split("\\s");

        String aoperation = "+ - / %";
        String sopearation[] = aoperation.split("\\s");

        String foundop = "";
        String space = "  ";

        for (int i = 0; i < words.length; i++) {
            System.out.println("inner for 1 : " + words[i]);
            if (text.isEmpty()) {

                JFrame f = new JFrame();
                JOptionPane.showMessageDialog(f, "You should import a Text File for the text area !");
            } else {
                for (int j = 0; j < sopearation.length; j++) {
                    System.out.println("inner for 2 : " + sopearation[j]);

                    if (words[i].equals(sopearation[j])) {
                        System.out.println("found: " + sopearation[j]);
                        foundop = foundop + space + sopearation[j];
                        jLabel16.setText("Found : " + foundop);

                        count_operation = count_operation + 1;

                    }

                }

                jLabel15.setText("Count of  + - / %  : " + count_operation);

                String plus = "++";
                String minus = "--";
                countplus = 0;
                countminus = 0;

                for (String word : words) {
                    if (word.equalsIgnoreCase(plus)) {
                        System.out.println("found: ++");
                        countplus = countplus + 1;
                    }
                    if (word.equalsIgnoreCase(minus)) {
                        System.out.println("found: --");
                        countminus = countminus + 1;
                    }
//                    count_operation=countplus+countminus;
                }

                jLabel11.setText("Count of  ++ : " + countplus);
                jLabel14.setText("Count of  -- : " + countminus);

            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        String text = jTextArea1.getText();
        String words[] = text.split("\\s");

        if (text.isEmpty()) {

            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "You should import a Text File for the text area !");
        } else {
            String roperation = "== != > < >= <=";
            String relational_opearator[] = roperation.split("\\s");

            count_realational_operator = 0;
            String foundop = "";
            String space = "  ";

            for (int i = 0; i < words.length; i++) {
                System.out.println("inner for 1 : " + words[i]);
                for (int j = 0; j < relational_opearator.length; j++) {
                    System.out.println("inner for 2 : " + relational_opearator[j]);

                    if (words[i].equals(relational_opearator[j])) {
                        System.out.println("found: " + relational_opearator[j]);
                        foundop = foundop + space + relational_opearator[j];
                        jLabel13.setText("Found : " + foundop);

                        count_realational_operator = count_realational_operator + 1;

                    }

                }

            }
            jLabel12.setText("Count of  ==  !=  >  <  >=  <=   : " + count_realational_operator);
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String text = jTextArea1.getText();
        String words[] = text.split("\\s");

        if (text.isEmpty()) {

            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "You should import a Text File for the text area !");
        } else {
            String loperation = "&& || ! , -> . :: ";
            String logical_opearation[] = loperation.split("\\s");

//            int count_logical_operation = 0;
            String foundop = "";
            String space = "  ";

            for (int i = 0; i < words.length; i++) {
                System.out.println("inner for 1 : " + words[i]);
                for (int j = 0; j < logical_opearation.length; j++) {
                    System.out.println("inner for 2 : " + logical_opearation[j]);

                    if (words[i].equals(logical_opearation[j])) {
                        System.out.println("found: " + logical_opearation[j]);
                        foundop = foundop + space + logical_opearation[j];
                        jLabel18.setText("Found : " + foundop);

                        count_logical_operation = count_logical_operation + 1;

                    }

                }

            }
            jLabel17.setText("Count of && || ! , -> . ::  : " + count_logical_operation);

        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String text = jTextArea1.getText();
        String words[] = text.split("\\s");

        if (text.isEmpty()) {

            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "You should import a Text File for the text area !");
        } else {
            String boperation = "| ^ ~ << >> >>> <<<";
            String bitwise_opearation[] = boperation.split("\\s");

//            int count_bitwise_operation = 0;
            String foundop = "";
            String space = "  ";

            for (int i = 0; i < words.length; i++) {
                System.out.println("inner for 1 : " + words[i]);
                for (int j = 0; j < bitwise_opearation.length; j++) {
                    System.out.println("inner for 2 : " + bitwise_opearation[j]);

                    if (words[i].equals(bitwise_opearation[j])) {
                        System.out.println("found: " + bitwise_opearation[j]);
                        foundop = foundop + space + bitwise_opearation[j];
                        jLabel20.setText("Found : " + foundop);

                        count_bitwise_operation = count_bitwise_operation + 1;

                    }

                }

            }
            jLabel19.setText("Count of  | ^ ~ << >>  >>> <<< : " + count_bitwise_operation);

         }    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        String text = jTextArea1.getText();
        String words[] = text.split("\\s");

        if (text.isEmpty()) {

            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "You should import a Text File for the text area !");
        } else {
            String aoperation = "+= -= *= /= = >>>= |= &= %= <<= >>= ^=";
            String assignment_opearation[] = aoperation.split("\\s");

//            int count_assignment_operation = 0;
            String foundop = "";
            String space = "  ";

            for (int i = 0; i < words.length; i++) {
                System.out.println("inner for 1 : " + words[i]);
                for (int j = 0; j < assignment_opearation.length; j++) {
                    System.out.println("inner for 2 : " + assignment_opearation[j]);

                    if (words[i].equals(assignment_opearation[j])) {
                        System.out.println("found: " + assignment_opearation[j]);
                        foundop = foundop + space + assignment_opearation[j];
                        jLabel27.setText("Found : " + foundop);

                        count_assignment_operation = count_assignment_operation + 1;

                    }

                }

            }
            jLabel25.setText("Count of Assignments operators : " + count_assignment_operation);

        }    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        String text = jTextArea1.getText();
        String words[] = text.split("\\s");

        if (text.isEmpty()) {

            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "You should import a Text File for the text area !");
        } else {
            String moperation = "endl \n";
            String manipulate_opearation[] = moperation.split("\\s");

            String foundop = "";
            String space = "  ";

            for (int i = 0; i < words.length; i++) {
                System.out.println("inner for 1 : " + words[i]);
                for (int j = 0; j < manipulate_opearation.length; j++) {
                    System.out.println("inner for 2 : " + manipulate_opearation[j]);

                    if (words[i].equals(manipulate_opearation[j])) {
                        System.out.println("found: " + manipulate_opearation[j]);
                        foundop = foundop + space + manipulate_opearation[j];
                        jLabel34.setText("Found : " + foundop);

                        count_manipulate_operation = count_manipulate_operation + 1;

                    }

                }

            }
            jLabel33.setText("Count of ‘endl’  ‘\\n’ : " + count_manipulate_operation);

        }    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        String text = jTextArea1.getText();
        String words[] = text.split("\\s");

        if (text.isEmpty()) {

            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "You should import a Text File for the text area !");
        } else {
            String key_words = "void double int float string printf println cout cin if for while do while switch case";
            String key_words_Set[] = key_words.split("\\s");

//            int count_key_words_Set = 0;
            String foundop = "";
            String space = "  ";

            for (int i = 0; i < words.length; i++) {
                System.out.println("inner for 1 : " + words[i]);
                for (int j = 0; j < key_words_Set.length; j++) {
                    System.out.println("inner for 2 : " + key_words_Set[j]);

                    if (words[i].equals(key_words_Set[j])) {
                        System.out.println("found: " + key_words_Set[j]);
                        foundop = foundop + space + key_words_Set[j];
                        jLabel55.setText("Found : " + foundop);

                        count_key_words_Set = count_key_words_Set + 1;

                    }

                }

            }
            jLabel56.setText("" + count_key_words_Set);

        }    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        String text = jTextArea1.getText();
        String words[] = text.split("\\s");

        if (text.isEmpty()) {

            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "You should import a Text File for the text area !");
        } else {
            char[] chnumber = text.toCharArray();
//            int numcount = 0;

            for (int i = 0; i < text.length(); i++) {

                if (Character.isDigit(chnumber[i])) {

                    numcount++;

                }
            }
            System.out.println("number: " + numcount);

            jLabel65.setText("" + numcount);

        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        String text = jTextArea1.getText();

        System.out.println("class_variable_method_object_count: " + class_variable_method_object_count);
//        countplus=0;
//        countminus=0;
//                count_star_and_keys = 0;
//                numcount = 0;
//                count_key_words_Set = 0;
//                count_manipulate_operation = 0;
//                count_assignment_operation = 0;
//                count_bitwise_operation = 0;
//                count_logical_operation = 0;
//                count_realational_operator = 0;
//
//                count_operation = 0;
//                result = 0;
//                count_star_and_keys = 0;
//                class_variable_method_object_count=0;
        if (text.isEmpty()) {

            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "You should import a Text File for the text area !");
        } else {

            result = count_star_and_keys + numcount + class_variable_method_object_count + count_key_words_Set + count_manipulate_operation + count_assignment_operation + count_bitwise_operation + count_logical_operation
                    + count_realational_operator + countplus + countminus + count_operation;
            System.out.println("Complexity (Cs): " + result);
            jLabel70.setText("" + result);

        }
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        String text = jTextArea1.getText();
        String words[] = text.split("\\s");

        String classoperation = "class";
        String classes_opearation[] = classoperation.split("\\s");

        String objectoperation = "new";
        String objects_opearation[] = objectoperation.split("\\s");

        String variable_key = "abstract assert boolean break byte case catch char class const default do double else enum extends false final finally float for goto if implements import instanceof int interface long native new null package private protected public return short static strictfp super switch synchronized this throw throws transient true try void volatile while continue";
        String variable_keys[] = variable_key.split("\\s");

        for (int i = 0; i < words.length; i++) {
            for (int j = 0; j < objects_opearation.length; j++) {

                if (words[i].equals(objects_opearation[j])) {

                    count_objects = count_objects + 1;

                }

            }

        }

        object_count.setText("" + count_objects);

        for (int i = 0; i < words.length; i++) {
            for (int j = 0; j < classes_opearation.length; j++) {

                if (words[i].equals(classes_opearation[j])) {

                    count_classes = count_classes + 1;

                }

            }

        }
        class_count.setText("" + count_classes);

///----------------------------------------------------------------------------variable count
        System.out.println(text.replaceAll("\\bString+([\\s][_$a-zA-Z])\\w+|\\bfloat+([\\s][_$a-zA-Z])\\w+|\\bdouble+([\\s][_$a-zA-Z])\\w+|\\bint+([\\s][_$a-zA-Z])\\w+", "FOUND A VARIABLE"));

        String variablePat = "\\bString+([\\s][_$a-zA-Z])\\w+|\\bfloat+([\\s][_$a-zA-Z])\\w+|\\bdouble+([\\s][_$a-zA-Z])\\w+|\\bint+([\\s][_$a-zA-Z])\\w+";
        Pattern pat = Pattern.compile(variablePat);
        Matcher patternMatcher = pat.matcher(text);

        count_variable = 0;
        System.out.println(text.length());

        while (patternMatcher.find()) {
            count_variable++;
            System.out.println("found: " + count_variable + " : "
                    + patternMatcher.start() + " - " + patternMatcher.end());
        }
        System.out.println("Variable count is: " + (count_variable));
        variable_count.setText("" + count_variable);

//----------------------------------------Methods count---------------------------------------------------
//        System.out.println(text.replaceAll("(\\bpublic|\\bprivate)+[\\s]+\\bfloat+([\\s][_$a-zA-Z])\\w+\\(\\)|(\\bpublic|\\bprivate)+[\\s]+\\bdouble+([\\s][_$a-zA-Z])\\w+\\(\\)|(\\bpublic|\\bprivate)+[\\s]+\\bint+([\\s][_$a-zA-Z])\\w+\\(\\)", "FOUND A METHOD"));
//        String methodPat = "((\\bpublic|\\bprivate)+[\\s]+\\bfloat+([\\s][_$a-zA-Z])\\w+\\(\\)|(\\bpublic|\\bprivate)+[\\s]+\\bdouble+([\\s][_$a-zA-Z])\\w+\\(\\)|(\\bpublic|\\bprivate)+[\\s]+\\bint+([\\s][_$a-zA-Z])\\w+\\(\\))|(\\bfloat+([\\s][_$a-zA-Z])\\w+|\\bdouble+([\\s][_$a-zA-Z])\\w+|\\bint+([\\s][_$a-zA-Z])\\w+)";
//        Pattern patm = Pattern.compile(methodPat);
//        Matcher methodMatcher = patm.matcher(text);
//
//        count_methodstotal = 0;
//        System.out.println(text.length());
//
//        while (methodMatcher.find()) {
//            count_methodstotal++;
//            System.out.println("found: " + count_methodstotal + " : "
//                    + methodMatcher.start() + " - " + methodMatcher.end());
//        }
///-------------------------------------***
        System.out.println(text.replaceAll("(\\bpublic|\\bprivate)+[\\s]+\\\\bString+([\\s][_$a-zA-Z])\\w+\\(\\)|(\\bpublic|\\bprivate)+[\\s]+\\bfloat+([\\s][_$a-zA-Z])\\w+\\(\\)|(\\bpublic|\\bprivate)+[\\s]+\\bdouble+([\\s][_$a-zA-Z])\\w+\\(\\)|(\\bpublic|\\bprivate)+[\\s]+\\bint+([\\s][_$a-zA-Z])\\w+\\(\\)|(\\bpublic|\\bprivate)+[\\s]+\\bvoid+([\\s][_$a-zA-Z])\\w+\\(\\)", "FOUND A METHOD"));
        String methodPat = "(\\bpublic|\\bprivate)+[\\s]+\\\\bString+([\\s][_$a-zA-Z])\\w+\\(\\)|(\\bpublic|\\bprivate)+[\\s]+\\bfloat+([\\s][_$a-zA-Z])\\w+\\(\\)|(\\bpublic|\\bprivate)+[\\s]+\\bdouble+([\\s][_$a-zA-Z])\\w+\\(\\)|(\\bpublic|\\bprivate)+[\\s]+\\bint+([\\s][_$a-zA-Z])\\w+\\(\\)|(\\bpublic|\\bprivate)+[\\s]+\\bvoid+([\\s][_$a-zA-Z])\\w+\\(\\)";
        Pattern patmethod = Pattern.compile(methodPat);
        Matcher methodMatcher = patmethod.matcher(text);

        count_methods = 0;
        System.out.println(text.length());

        while (methodMatcher.find()) {
            count_methods++;
            System.out.println("found: " + count_methods + " : "
                    + methodMatcher.start() + " - " + methodMatcher.end());
        }
        System.out.println("Method count is: " + count_methods);
        method_count.setText("" + count_methods);

        class_variable_method_object_count = count_classes + count_variable + count_objects;


    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        String text = jTextArea1.getText();

        if (text.isEmpty()) {

            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "You should import a Text File for the text area !");
        } else {

            String[] lines = text.split("\n");
            int lineCount = lines.length;
            System.out.println(result);
            System.out.println(lineCount);

            for (int i = 0; i < lineCount; i++) {

                String words[] = lines[i].split("\\s");
                int countand = 0;
                int countstar = 0;
                int count_throw = 0;
                int count_throws = 0;
                int count_new = 0;
                int count_delete = 0;
                count_star_and_keys = 0;
                numcount = 0;
                count_key_words_Set = 0;
                count_manipulate_operation = 0;
                count_assignment_operation = 0;
                count_bitwise_operation = 0;
                count_logical_operation = 0;
                count_realational_operator = 0;

                count_operation = 0;
                result = 0;
                count_star_and_keys = 0;
                class_variable_method_object_count = 0;
                count_objects = 0;
                count_variable = 0;
                count_methods = 0;
                count_classes = 0;

                for (int x = 0; x < words.length; x++) {
                    String star = "*";
                    String and = "&";
                    String throwk = "throw";
                    String throwsk = "throws";
                    String newk = "new";
                    String deletek = "delete";

                    String aoperation = "+ - / % ++ --";
                    String sopearation[] = aoperation.split("\\s");
                    String roperation = "== != > < >= <=";
                    String relational_opearator[] = roperation.split("\\s");

                    String loperation = "&& || ! , -> . ::";
                    String logical_opearation[] = loperation.split("\\s");

                    String boperation = "| ^ ~ << >> >>> <<<";
                    String bitwise_opearation[] = boperation.split("\\s");

                    String aaoperation = "+= -= *= /= = >>>= |= &= %= <<= >>= ^=";
                    String assignment_opearation[] = aaoperation.split("\\s");

                    String moperation = "endl \n";
                    String manipulate_opearation[] = moperation.split("\\s");

                    String key_words = "void double int float string printf println cout cin if for while do while switch case";
                    String key_words_Set[] = key_words.split("\\s");

                    //----
                    String classoperation = "class";
                    String classes_opearation[] = classoperation.split("\\s");

                    String objectoperation = "new";
                    String objects_opearation[] = objectoperation.split("\\s");

                    String variable_key = "abstract assert boolean break byte case catch char class const default do double else enum extends false final finally float for goto if implements import instanceof int interface long native new null package private protected public return short static strictfp super switch synchronizedthis throw throws transient true try void volatile while continue";
                    String variable_keys[] = variable_key.split("\\s");

                    if (words[x].equalsIgnoreCase(and)) {
                        System.out.println("found: &");
                        countand = countand + 1;

                    }
                    if (words[x].equals(star)) {

                        System.out.println("found: *");
                        countstar = countstar + 1;
                    }
                    if (words[x].equals(throwk)) {

                        System.out.println("found: throw");
                        count_throw = count_throw + 1;
                    }
                    if (words[x].equals(throwsk)) {

                        System.out.println("found: throws");
                        count_throws = count_throws + 1;
                    }
                    if (words[x].equals(newk)) {

                        System.out.println("found: new");
                        count_new = count_new + 1;
                    }
                    if (words[x].equals(deletek)) {

                        System.out.println("found: delete");
                        count_delete = count_delete + 1;
                    }

                    count_star_and_keys = 2 * (countand + countstar + count_throw + count_throws + count_new + count_delete);

                    for (int j = 0; j < sopearation.length; j++) {

                        if (words[x].equals(sopearation[j])) {

                            count_operation = count_operation + 1;

                        }

                    }

                    char[] chnumber = words[x].toCharArray();

                    for (int a = 0; a < chnumber.length; a++) {

                        if (Character.isDigit(chnumber[a])) {

                            numcount++;

                        }
                    }

                    for (int b = 0; b < relational_opearator.length; b++) {

                        if (words[x].equals(relational_opearator[b])) {

                            count_realational_operator = count_realational_operator + 1;

                        }

                    }

                    for (int c = 0; c < logical_opearation.length; c++) {

                        if (words[x].equals(logical_opearation[c])) {

                            count_logical_operation = count_logical_operation + 1;

                        }

                    }
                    for (int d = 0; d < bitwise_opearation.length; d++) {

                        if (words[x].equals(bitwise_opearation[d])) {

                            count_bitwise_operation = count_bitwise_operation + 1;

                        }

                    }

                    for (int e = 0; e < assignment_opearation.length; e++) {

                        if (words[x].equals(assignment_opearation[e])) {

                            count_assignment_operation = count_assignment_operation + 1;

                        }

                    }

                    for (int f = 0; f < manipulate_opearation.length; f++) {

                        if (words[x].equals(manipulate_opearation[f])) {

                            count_manipulate_operation = count_manipulate_operation + 1;

                        }

                    }

                    for (int g = 0; g < key_words_Set.length; g++) {

                        if (words[x].equals(key_words_Set[g])) {

                            count_key_words_Set = count_key_words_Set + 1;

                        }

                    }

//            ---class_variable_method_object_count--------------
                    for (int j = 0; j < objects_opearation.length; j++) {

                        if (words[x].equals(objects_opearation[j])) {

                            count_objects = count_objects + 1;

                        }

                    }
                    for (int j = 0; j < classes_opearation.length; j++) {

                        if (words[x].equals(classes_opearation[j])) {

                            count_classes = count_classes + 1;

                        }

                    }

                    //--variable validation regex started
                    String variablePat = "\\bfloat+([\\s][_$a-zA-Z])\\w+|\\bdouble+([\\s][_$a-zA-Z])\\w+|\\bint+([\\s][_$a-zA-Z])\\w+";

//                    int line_i_length=lines[i].length();
                    Pattern pat = Pattern.compile(variablePat);
                    Matcher patternMatcher = pat.matcher(lines[i]);

                    count_variable = 0;
                    while (patternMatcher.find()) {
                        count_variable++;
                        System.out.println("found: " + count_variable + " : "
                                + patternMatcher.start() + " - " + patternMatcher.end());
                    }

                    class_variable_method_object_count = count_classes + count_variable + count_objects;

                    result = count_star_and_keys + numcount + class_variable_method_object_count + count_key_words_Set + count_manipulate_operation + count_assignment_operation + count_bitwise_operation + count_logical_operation
                            + count_realational_operator + count_operation;

                }

                Object[] row = {i, lines[i], count_star_and_keys, count_operation, count_realational_operator, count_logical_operation, count_bitwise_operation, count_assignment_operation, count_manipulate_operation, count_key_words_Set, numcount, class_variable_method_object_count, result, 0};

                DefaultTableModel model = (DefaultTableModel) tb2.getModel();

                model.addRow(row);

            }

        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        String text = jTextArea1.getText();

        if (text.isEmpty()) {

            JFrame f = new JFrame();
            JOptionPane.showMessageDialog(f, "You should import a Text File for the text area !");
        } else {

            jTextArea1.setText(text.replaceAll("(?:/\\*(?:[^*]|(?:\\*+[^*/]))*\\*+/)|(?://.*)", ""));
            System.out.println(text.replaceAll("(?:/\\*(?:[^*]|(?:\\*+[^*/]))*\\*+/)|(?://.*)", ""));

//            System.out.println("working comments");
//            String textPat = "(?:/\\\\*(?:[^*]|(?:\\\\*+[^*/]))*\\\\*+/)|(?://.*)";
//            Pattern PatRemoveComments = Pattern.compile(textPat);
//            Matcher CommentRegexMatcher = PatRemoveComments.matcher(text);
//
//            if (CommentRegexMatcher.matches()) {
//                JOptionPane.showMessageDialog(null, "Comments are removed !");
//
//            }
        }


    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        MainViewUI mv = new MainViewUI();
        mv.setVisible(true);
        this.dispose();


    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        String text = jTextArea1.getText();
        jTextArea1.setText(text.replaceAll("(\"([^\"]|\"\")*\")", ""));

        System.out.println(text.replaceAll("(\"([^\"]|\"\")*\")", ""));


    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed

        try {
            DefaultPieDataset dataset = new DefaultPieDataset();

            String query = "Select count_words,count_total from cs_table ";

            pst = con.prepareStatement(query);
            rs = pst.executeQuery();
            while (rs.next()) {
                dataset.setValue(rs.getString("count_words"), Double.parseDouble(rs.getString("count_total")));
            }

            JFreeChart chart = ChartFactory.createPieChart("Pie Chart to compare size Complexity over Number of words in the Text area", dataset, true, true, true);
            PiePlot p = (PiePlot) chart.getPlot();

            //      p.setForegroundAlpha(TOP_ALIGNMENT);
            ChartFrame panel = new ChartFrame("Pie Chart", chart);
            panel.setVisible(true);
            panel.setSize(400, 400);
            // display_graph.add(panel);

            System.out.println("hhhhhhhh");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            System.out.println(e);

        }


    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed

        try {

            InputStream in = new FileInputStream(new File("C:\\Users\\Nilfa.RS\\Documents\\NetBeansProjects\\SPM_1\\src\\TotalComplexityReport.jrxml"));
            JasperDesign jd = JRXmlLoader.load(in);
            String sql = "select * from cs_table";
            JRDesignQuery newQuery = new JRDesignQuery();
            newQuery.setText(sql);
            jd.setQuery(newQuery);
            JasperReport jr = JasperCompileManager.compileReport(jd);
            HashMap para = new HashMap();
            JasperPrint j = JasperFillManager.fillReport(jr, para, con);
            JasperViewer.viewReport(j, false);

        } catch (FileNotFoundException | JRException e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        String table_words = words1.getText();
        String chars = jLabel2.getText();
        String keys = jLabel65.getText();
        String num = jLabel56.getText();
        String cs = jLabel70.getText();

        try {

            String q = "INSERT INTO cs_table (count_words,count_char,count_numeric,count_keywords,count_total) values ('" + table_words + "','" + chars + "','" + keys + "','" + num + "','" + cs + "')";
            pst = con.prepareStatement(q);
            pst.execute();
            JFrame success = new JFrame("Successful Message");

            JOptionPane.showMessageDialog(success, "Record added Successfully");

        } catch (Exception e) {

            JFrame error = new JFrame("Error");
            JOptionPane.showMessageDialog(error, "Something went wrong! Please check the Data");
            System.out.println(e);

        }


    }//GEN-LAST:event_jButton14ActionPerformed

    private void searchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbtnActionPerformed
        highlight(jTextArea1, searchtext.getText());


    }//GEN-LAST:event_searchbtnActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(uploadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(uploadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(uploadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(uploadFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new uploadFile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel class_count;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel method_count;
    private javax.swing.JLabel object_count;
    private javax.swing.JButton searchbtn;
    private javax.swing.JTextField searchtext;
    private javax.swing.JTable tb2;
    private javax.swing.JLabel variable_count;
    private javax.swing.JLabel words1;
    // End of variables declaration//GEN-END:variables
}
